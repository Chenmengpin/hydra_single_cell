dovetailProteins
View(pfam.hits.TFs)
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
result <- result[order(-results$dbd),]
View(result)
result <- result[1,]
View(result)
i <- 5
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
i <- 4
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
View(result)
i <- 5
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
url <- paste0("jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
i <- 6
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
result <- result[order(-results$dbd),]
names(dovetailProteins[[6]])
names(dovetailProteins[6])
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
url
result <- fromJSON(url)
length(result[[2]])
for (i in 1:10) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(results != 0)) {
result <- result[order(-results$dbd),]
result <- result[1,]
}
}
i <- 1
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
for (i in 1:10) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(result != 0)) {
result <- result[order(-results$dbd),]
result <- result[1,]
}
}
results <- list()
for (i in 1:10) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(result != 0)) {
result <- result[order(-results$dbd),]
result <- result[1,]
results <- c(results,result)
}
}
i <- 2
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
for (i in 1:10) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(result != 0)) {
result <- result[order(-result$dbd),]
result <- result[1,]
results <- c(results,result)
}
}
notTooLong <- which(width(dovetailProteins) < 2000)
dovetailProteins <- readAAStringSet("/Volumes/JC_Data/NMF/Enrichment/hydra.augustus.nameMod.fastp", format = "fasta")
useThese <- which(names(dovetailProteins) %in% gsub("[.]t.*","",pfam.hits.TFs$V4))
dovetailProteins <- dovetailProteins[useThese]
keepThese <- which(!duplicated(names(dovetailProteins)))
dovetailProteins <- dovetailProteins[keepThese]
notTooLong <- which(width(dovetailProteins) < 2000)
dovetailProteins <- dovetailProteins[notTooLong]
#Load Full Seurat Object (genome)
ds.ds <- readRDS("/Users/Jcazet/Google_Drive/Juliano_lab/HyDS_data/DS_ms_analyses/objects/genome_S1_pc30.rds")
head(ds.ds@data@Dimnames[[1]])
head(gsub("[.]t.*","",ds.ds@data@Dimnames[[1]]))
inDS <- which(names(dovetailProteins) %in% gsub("[.]t.*","",ds.ds@data@Dimnames[[1]]))
dovetailProteins <- readAAStringSet("/Volumes/JC_Data/NMF/Enrichment/hydra.augustus.nameMod.fastp", format = "fasta")
useThese <- which(names(dovetailProteins) %in% gsub("[.]t.*","",pfam.hits.TFs$V4))
dovetailProteins <- dovetailProteins[useThese]
keepThese <- which(!duplicated(names(dovetailProteins)))
dovetailProteins <- dovetailProteins[keepThese]
notTooLong <- which(width(dovetailProteins) < 2000)
dovetailProteins <- dovetailProteins[notTooLong]
inDS <- which(names(dovetailProteins) %in% gsub("[.]t.*","",ds.ds@data@Dimnames[[1]]))
dovetailProteins <- dovetailProteins[inDS]
results <- list()
for (i in 1:10) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(result != 0)) {
result <- result[order(-result$dbd),]
result <- result[1,]
results <- c(results,result)
}
}
View(results)
results <- vector("list",length(dovetailProteins))
i <-2
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
View(result)
result <- result[["results"]]
View(result)
#Set working directory to be the location of this R script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#import the peak annotations from uropa
peaks <- read.table("/Users/Jcazet/Google_Drive/Juliano_lab/Dropseq_R/Jack/LR_Final/Homer/Whole_2Rep_IDR_finalhits.txt", header = T, stringsAsFactors = F)
View(peaks)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#import the peak annotations from uropa
peaks <- read.table("/Users/Jcazet/Google_Drive/Juliano_lab/Dropseq_R/Jack/LR_Final/Homer/Whole_2Rep_IDR_finalhits.txt", header = T, stringsAsFactors = F)
bedpeaks <- read.table("/Volumes/JC_Data/NMF/Enrichment/MetaReg_Round2(AME)/2Rep.IDR.mod.bed", stringsAsFactors = F)
#focus on peaks that either overlap the TSS, or that are upstream of it (within 10kB)
peaks <- peaks[peaks$genomic_location %in% c("overlapStart", "upstream"),]
peaks <- peaks[peaks$distance <= 2000,]
View(peaks)
#pull cell scores
cellScores <- read.csv("/Users/Jcazet/Desktop/goodMeta_CellScores.csv", row.names = 1)
View(cellScores)
View(pfam.hits.TFs)
View(result)
View(pfam.hits.TFs)
results <- vector("list",length(dovetailProteins))
for (i in 1:10) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(result != 0)) {
result <- result[order(-result$dbd),]
result <- result[1,]
results[i] <- result
}
}
for (i in 1:10) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(result != 0)) {
result <- result[order(-result$dbd),]
result <- result[1,]
results[[i]] <- result
}
}
for (i in 1:10) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(result != 0)) {
results[[i]] <- result
}
}
for (i in 1:20) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(result != 0)) {
results[[i]] <- result
}
}
for (i in 1:length(dovetailProteins)) {
print(i)
url <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url)
result <- result[["results"]]
if(length(result != 0)) {
results[[i]] <- result
}
}
width(dovetailProteins[24])
width(dovetailProteins[23])
width(dovetailProteins[24])
width(dovetailProteins[25])
?fromJSON
?url
i <- 24
print(i)
link <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url(link))
result <- result[["results"]]
for (i in 1:length(dovetailProteins)) {
print(i)
link <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url(link))
result <- result[["results"]]
if(length(result != 0)) {
results[[i]] <- result
}
}
library(jsonlite)
library(Biostrings)
dovetailProteins <- readAAStringSet("/Volumes/JC_Data/NMF/Enrichment/hydra.augustus.nameMod.fastp", format = "fasta")
useThese <- which(names(dovetailProteins) %in% gsub("[.]t.*","",pfam.hits.TFs$V4))
dovetailProteins <- dovetailProteins[useThese]
keepThese <- which(!duplicated(names(dovetailProteins)))
dovetailProteins <- dovetailProteins[keepThese]
# notTooLong <- which(width(dovetailProteins) < 2000)
#
# dovetailProteins <- dovetailProteins[notTooLong]
inDS <- which(names(dovetailProteins) %in% gsub("[.]t.*","",ds.ds@data@Dimnames[[1]]))
dovetailProteins <- dovetailProteins[inDS]
results <- vector("list",length(dovetailProteins))
for (i in 1:length(dovetailProteins)) {
print(i)
link <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url(link))
result <- result[["results"]]
if(length(result != 0)) {
results[[i]] <- result
} else {
print("Empty")
}
}
View(results)
View(results)
i <- 122
link <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url(link))
result <- result[["results"]]
if(length(result != 0)) {
results[[i]] <- result
} else {
print("Empty")
}
library(jsonlite)
library(Biostrings)
dovetailProteins <- readAAStringSet("/Volumes/JC_Data/NMF/Enrichment/hydra.augustus.nameMod.fastp", format = "fasta")
useThese <- which(names(dovetailProteins) %in% gsub("[.]t.*","",pfam.hits.TFs$V4))
dovetailProteins <- dovetailProteins[useThese]
keepThese <- which(!duplicated(names(dovetailProteins)))
dovetailProteins <- dovetailProteins[keepThese]
# notTooLong <- which(width(dovetailProteins) < 2000)
#
# dovetailProteins <- dovetailProteins[notTooLong]
inDS <- which(names(dovetailProteins) %in% gsub("[.]t.*","",ds.ds@data@Dimnames[[1]]))
dovetailProteins <- dovetailProteins[inDS]
results <- vector("list",length(dovetailProteins))
for (i in 1:length(dovetailProteins)) {
print(i)
link <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url(link))
result <- result[["results"]]
if(length(result != 0)) {
results[[i]] <- result
} else {
print("Empty")
}
}
names(results) <- names(dovetailProteins)
head(names(results))
results.hits <- results[!(is.null(results))]
is.null(results[[3]])
results.hits <- results[[!(is.null(results))]]
results.hits <- results[!(is.null(results))]
empty.res <- which(is.null(results))
results.hits <- results
results.hits[sapply(results.hits, is.null)] <- NULL
View(results.hits)
View(results.hits)
results.hits <- lapply(results.hits, function (x) x[x$evalue < 1e-5,])
View(results.hits)
results.hits[sapply(results.hits, function(x) length(x$evalue) == 0)] <- NULL
View(results.hits)
motif.IDs <- vector(0)
motif.IDs <- vector(NULL)
?vector
motif.IDs <- NULL
motif.IDs <- NULL
#generate full list of motifs that we need
for (i in 1:length(results.hits)) {
subresult <- results.hits[[i]]
motif.IDs <- c(motif.IDs, subresult$matrix_id)
}
motif.IDs <- motif.IDs[unique(motif.IDs)]
motif.IDs <- NULL
#generate full list of motifs that we need
for (i in 1:length(results.hits)) {
subresult <- results.hits[[i]]
motif.IDs <- c(motif.IDs, subresult$matrix_id)
}
motif.IDs <- motif.IDs[!duplicated(motif.IDs)]
#move into folder with JASPAR matrices
setwd("/Volumes/JC_Data/JASPAR2018_CORE_non-redundant_pfms_jaspar")
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
#find files with match to hydra hit
fileList <- fileList[fileList %in% paste0(motif.IDs,".jaspar")]
motif.IDs[paste0(!(motif.IDs,".jaspar") %in% fileList)]
motif.IDs[!(paste0(motif.IDs,".jaspar") %in% fileList)]
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
#find files with match to hydra hit
fileList <- fileList[fileList %in% paste0(gsub("[.].*","",motif.IDs),".jaspar")]
gsub("[.].*","",motif.IDs
)
?grep
#find files with match to hydra hit
fileList <- grep(gsub("[.].*","",motif.IDs),fileList)
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
#find files with match to hydra hit
fileList <- grep(gsub("[.].*","",motif.IDs),fileList)
gsub("[.].*","",motif.IDs)
fileList
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
gsub("[.].[.].*","",fileList)
#find files with match to hydra hit
fileList <- fileList[gsub("[.].[.].*","",fileList) %in% gsub("[.].*","",motif.IDs)]
#move into folder with JASPAR matrices
setwd("/Volumes/JC_Data/JASPAR2018_CORE_redundant_pfms_jaspar")
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
#find files with match to hydra hit
fileList <- fileList[fileList %in% motif.IDs]
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
#find files with match to hydra hit
fileList <- fileList[fileList %in% paste0(motif.IDs,".jaspar")]
lapply(fileList, function(x) file.copy(from = x, to = "../Hydra_PFMs/"))
#Set working directory to be the location of this R script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#import the peak annotations from uropa
peaks <- read.table("/Users/Jcazet/Google_Drive/Juliano_lab/Dropseq_R/Jack/LR_Final/Homer/Whole_2Rep_IDR_finalhits.txt", header = T, stringsAsFactors = F)
bedpeaks <- read.table("/Volumes/JC_Data/NMF/Enrichment/MetaReg_Round2(AME)/2Rep.IDR.mod.bed", stringsAsFactors = F)
#focus on peaks that either overlap the TSS, or that are upstream of it (within 10kB)
peaks <- peaks[peaks$genomic_location %in% c("overlapStart", "upstream"),]
peaks <- peaks[peaks$distance <= 2000,]
#pull cell scores
cellScores <- read.csv("/Users/Jcazet/Desktop/goodMeta_CellScores.csv", row.names = 1)
cellScores[cellScores == 0] <- NA
#create function that will take an index and use that to check for genes correlated with the metagene selected by that index
expressData <- as.matrix(ds.ds@data)
#Load Full Seurat Object (genome)
ds.ds <- readRDS("/Users/Jcazet/Google_Drive/Juliano_lab/HyDS_data/DS_ms_analyses/objects/genome_S1_pc30.rds")
#create function that will take an index and use that to check for genes correlated with the metagene selected by that index
expressData <- as.matrix(ds.ds@data)
expressData <- expressData[which(rowSums(expressData) > 0),]
expressData.mean <- apply(expressData,1,function(x) mean(x[x!=0]))
expressData.count <- apply(expressData,1,function(x) length(x[x>0]))
expressData <- expressData[which(expressData.mean > 0.5 & expressData.count > 20),]
cellScores <- cellScores[match(rownames(cellScores),colnames(expressData)),]
metaCor <- function(x) {
cellScores.use <- cellScores[,x]
apply(expressData,1, function(x) cor(x,cellScores.use, use = "pairwise.complete.obs"))
}
rm(ds.ds)
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
corResults <- foreach(i=1:length(colnames(cellScores))) %dopar% metaCor(i)
corResults.df <- as.data.frame(corResults)
colnames(corResults.df) <- colnames(cellScores)
#convert NAs to 0
corResults.df[is.na(corResults.df)] <- 0
#get rid of peaks for genes not in ds dataset
peaks <- peaks[peaks$ID %in% gsub("[.]t.*","", rownames(corResults.df)),]
corResults.keep <- apply(corResults.df,2,function(x) x[x > 0.4])
metaMark.genes <- lapply(corResults.keep, function(x)names(x))
#return all peaks associated with the markers for each metagene cell population
metaPeaks <- lapply(metaMark.genes, function(x) peaks[peaks$ID %in% gsub("[.]t.*","",x),])
metaPeaks <- lapply(metaPeaks, function(x) bedpeaks[bedpeaks$V4 %in% x$peak_id,])
controlPeaks <- lapply(metaPeaks, function(x) bedpeaks[!(bedpeaks$V4 %in% x$V4),]
setwd("/Volumes/JC_Data/NMF/Enrichment/MetaReg_Round5(0.4Cor_EcxludeCS_2kb)")
#print bed files
lapply(1:length(metaPeaks), function(x) write.table(metaPeaks[[x]],file = paste0(names(metaPeaks)[x],"_peaks.bed"), sep = "\t", row.names = F, col.names = F, quote = F))
#print control bed files
)]
controlPeaks <- lapply(metaPeaks, function(x) bedpeaks[!(bedpeaks$V4 %in% x$V4),])
setwd("/Volumes/JC_Data/NMF/Enrichment/MetaReg_round6(0.4Cor_ExcludeCS_2kb_HydraMotif_AME)")
#print bed files
lapply(1:length(metaPeaks), function(x) write.table(metaPeaks[[x]],file = paste0(names(metaPeaks)[x],"_peaks.bed"), sep = "\t", row.names = F, col.names = F, quote = F))
#print control bed files
lapply(1:length(controlPeaks), function(x) write.table(controlPeaks[[x]],file = paste0(names(controlPeaks)[x],"_Controlpeaks.bed"), sep = "\t", row.names = F, col.names = F, quote = F))
#move into folder with JASPAR matrices
setwd("/Volumes/JC_Data/JASPAR2018_CORE_redundant_pfms_meme")
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
#find files with match to hydra hit
fileList <- fileList[fileList %in% paste0(motif.IDs,".meme")]
#import dovetail v.1 protein sequences
dovetailProteins <- readAAStringSet("/Volumes/JC_Data/NMF/Enrichment/hydra.augustus.nameMod.fastp", format = "fasta")
#limit to proteins with predicted DNA binding domains
useThese <- which(names(dovetailProteins) %in% gsub("[.]t.*","",pfam.hits.TFs$V4))
dovetailProteins <- dovetailProteins[useThese]
#Load List of TF domains from Mendoza et al., 2013
pfam.TFdomains <- read.table("/Users/Jcazet/Google_Drive/Juliano_lab/Dropseq_R/Jack/LR_Final/TFs/TF_domains.txt", stringsAsFactors = F)
#add pou domain
pfam.TFdomains <- c(pfam.TFdomains[,1], "PF00157")
#or for genome
pfam.hits <- read.table("/Volumes/mcb_labs/juliano/Genomes_transcriptomes/Dove_tail_assembly/hydra.augustus.pfam.mod.txt", stringsAsFactors = F)
#or for genome
pfam.hits <- read.table("/Volumes/mcb_labs/juliano/Genomes_transcriptomes/Dove_tail_assembly/hydra.augustus.pfam.mod.txt", stringsAsFactors = F)
#eliminate stuff after decimal for transcriptome IDS
pfam.hits$V2 <- gsub("[.].*","",pfam.hits$V2)
#find transcripts with TF pfam hit
pfam.hits.TFs <- pfam.hits[pfam.hits$V2 %in% pfam.TFdomains,]
#get rid of duplicate hits
pfam.hits.TFs <- pfam.hits.TFs[!duplicated(pfam.hits.TFs$V4),]
pfam.hits.TFs <- pfam.hits.TFs[c(1,4)]
#Load Full Seurat Object (genome)
ds.ds <- readRDS("/Users/Jcazet/Google_Drive/Juliano_lab/HyDS_data/DS_ms_analyses/objects/genome_S1_pc30.rds")
#import dovetail v.1 protein sequences
dovetailProteins <- readAAStringSet("/Volumes/JC_Data/NMF/Enrichment/hydra.augustus.nameMod.fastp", format = "fasta")
#limit to proteins with predicted DNA binding domains
useThese <- which(names(dovetailProteins) %in% gsub("[.]t.*","",pfam.hits.TFs$V4))
dovetailProteins <- dovetailProteins[useThese]
#remove isoforms
keepThese <- which(!duplicated(names(dovetailProteins)))
dovetailProteins <- dovetailProteins[keepThese]
#remove genes that don't appear in dropseq
inDS <- which(names(dovetailProteins) %in% gsub("[.]t.*","",ds.ds@data@Dimnames[[1]]))
dovetailProteins <- dovetailProteins[inDS]
#initialize empty results list
results <- vector("list",length(dovetailProteins))
#pull putative binding motifs using jaspar RESTful API and put results into list
for (i in 1:length(dovetailProteins)) {
print(i)
link <- paste0("http://jaspar.genereg.net/api/v1/infer/",as.character(dovetailProteins[i]),"/")
result <- fromJSON(url(link))
result <- result[["results"]]
if(length(result != 0)) {
results[[i]] <- result
} else {
print("Empty")
}
}
#pull names for each result
names(results) <- names(dovetailProteins)
results.hits <- results
#remove empy entries
results.hits[sapply(results.hits, is.null)] <- NULL
#remove hits above evalue threshold
results.hits <- lapply(results.hits, function (x) x[x$evalue < 1e-5,])
#remove genes with no hits above evalue threshold
results.hits[sapply(results.hits, function(x) length(x$evalue) == 0)] <- NULL
motif.IDs <- NULL
#generate full list of motifs that we need
for (i in 1:length(results.hits)) {
subresult <- results.hits[[i]]
motif.IDs <- c(motif.IDs, subresult$matrix_id)
}
motif.IDs <- motif.IDs[!duplicated(motif.IDs)]
#move into folder with JASPAR matrices
setwd("/Volumes/JC_Data/JASPAR2018_CORE_redundant_pfms_meme")
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
#find files with match to hydra hit
fileList <- fileList[fileList %in% paste0(motif.IDs,".meme")]
lapply(fileList, function(x) file.copy(from = x, to = "../Hydra_PFMs/"))
controlPeaks <- lapply(controlPeaks, function(x) x[sample(1:nrow(x), 20000, replace = F),])
controlPeaks <- lapply(metaPeaks, function(x) bedpeaks[!(bedpeaks$V4 %in% x$V4),])
controlPeaks <- lapply(controlPeaks, function(x) x[sample(1:nrow(x), 10000, replace = F),])
#print control bed files
lapply(1:length(controlPeaks), function(x) write.table(controlPeaks[[x]],file = paste0(names(controlPeaks)[x],"_Controlpeaks.bed"), sep = "\t", row.names = F, col.names = F, quote = F))
setwd("/Volumes/JC_Data/NMF/Enrichment/MetaReg_round6(0.4Cor_ExcludeCS_2kb_HydraMotif_AME)")
#print control bed files
lapply(1:length(controlPeaks), function(x) write.table(controlPeaks[[x]],file = paste0(names(controlPeaks)[x],"_Controlpeaks.bed"), sep = "\t", row.names = F, col.names = F, quote = F))
controlPeaks <- lapply(metaPeaks, function(x) bedpeaks[!(bedpeaks$V4 %in% x$V4),])
#print control bed files
lapply(1:length(controlPeaks), function(x) write.table(controlPeaks[[x]],file = paste0(names(controlPeaks)[x],"_Controlpeaks.bed"), sep = "\t", row.names = F, col.names = F, quote = F))
#move into folder with JASPAR matrices
setwd("/Volumes/JC_Data/JASPAR2018_CORE_redundant_pfms_jaspar")
#copy motifs we need into the Hydra_PFMs folder
fileList <- list.files(".")
#find files with match to hydra hit
fileList <- fileList[fileList %in% paste0(motif.IDs,".jaspar")]
lapply(fileList, function(x) file.copy(from = x, to = "../Hydra_PFMs/"))
warnings()
lapply(fileList, function(x) file.copy(from = x, to = "../Hydra_PFMs/"))
?commandArgs
?pwm
?PWM
?read.table
?write.table
